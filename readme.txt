

Dockerを使った今どきのWEBシステム開発


■自己紹介

エンジニア歴15年、最近子供が生まれた一児の父。

これまでのキャリアでは、組み込み系のシステムを開発する案件が多く
WEBシステム開発の経験は浅い
そのため、最近は、WEBシステム開発案件に入ると、キャッチアップに苦労している


■背景
最近の開発案件は、2000年あたりのITバブル時に創業した企業から降りてくる案件が
多い印象がある。


そのような企業の多くは、オンプレミス（自前で構築・運用するサーバー）で構築した
モノリシック（１つのサーバーで多くのサービスが動いている）な古いシステムで、
使用しているフレームワークも古く、以下のような課題がある。

・近年の複雑化する機能要求に素早く追随できない
・急激な需要の増加に対応できない



現在抱えている課題
・言語バージョン及びフレームワークが古い 。技術的負債が大きく改修の工数が増える。
・複数の サービス プロダクト が混在して 同じシステムに同居しているためお互いの負荷が影響してしまう。
・オンプレミス 構成 の構成だと ビジネスモデルと あっていないため 費用対効果が薄い 。

プロジェクトの目的
・費用対効果が高く、障害が起きにくいシステムを構築する
・サービス同士が影響しない環境にする
・シンプルな構成に作り直すことで改修やテストのコストを減らし、システム運用をしやすくする


このような状況の中、求められるエンジニアの要件が変化してきている。



①市場の変化に合わせて柔軟かつ迅速にビジネスモデルを変更できず、デジタル競争の敗者になってしまう
②システムの維持管理費が高額化することで技術的負債を抱え、業務基盤そのものの維持・継承が困難になる
③保守運用の担い手が不足することで、サイバーセキュリティや事故・災害によるシステムトラブルやデータ滅失などのリスクが高まる

https://www.meti.go.jp/shingikai/mono_info_service/digital_transformation/20180907_report.html


■目的

■対象者
・エンジニアを目指している人
・これからVue.jsやLaravelなどを学ぼうとしている人
・Linuxを学ぼうとしている人
・Dockerを学ぼうとしている人
・DevOpsを学ぼうとしている人
・すでに案件に入っていて、スキルアップしたい人
・AWSを理解しようとしている人
・Vue.jsやLaravelで作成したプログラムをAWSにアップしようとしている人


■今、開発現場で何が起きているのか？

・事例①
　大手ECパッケージ開発会社

　　開発環境、ステージング環境、本番環境の環境差分が2000箇所以上あり、
　　人の手で修正しなければならない。

　　新しいメンバーがプロジェクトに参画し、自分用の開発環境を構築する際に
　　手順書通り行ってもなかなかうまくいかず、環境構築まで1週間かかる。

　　本番サイトをリニューアルするたびに担当者が徹夜して対応。
　　毎回、リリース作業ミスが発生。

　　限定商品販売時などのセールの際に、サイトにアクセスが集中して、
　　サイトに接続できない状況が発生。


・事例②
　大手施設情報検索＆予約サイト
　　飲食店、薬局、整体、エステなど、会員数2800万人が利用するサービスを展開

　　日曜日の昼間に基幹システムに不具合が発生し、飲食店、薬局、整体、エステなどの
　　予約サービスがすべて止まるという大規模障害が発生した。


・事例③
　AWSの大規模障害
　2019/8/23に東京リージョン（ap-northeast-1）にて、データセンターで
　冷却システムに不具合が発生し、サーバーの温度が上昇したために、電源が停止。

　コンテナ化していたサービスは早く復旧ができた。
　AWS Fargateを使用しているサービスは自動復旧できた。


https://www.itmedia.co.jp/news/articles/1908/28/news127.html


■今、開発現場で求められているもの

１．コンテナ化(DevOps、マイクロサービス)
２．サーバレス


■モノリスとマイクロサービス

https://codezine.jp/article/detail/11055



■目標
Dockerを使って、3層アーキテクチャ(フロント、バックエンド、DB)を
簡単にローカル開発環境とWEB本番環境にデプロイできるようにする。


■Dockerとは？
コンテナ型仮想化技術を実現するソフトウェア。
「パソコンの中に仮想のパソコンを起動する」
仮想マシンとの違い。
容量が少なくて軽い・起動が速い


■なぜDockerなのか？

・開発環境と本番の環境差分を少なくできる
・環境を汚さない
・簡単に構築と破壊ができる


■DevOpsとは


■必要なもの
git
VSCode
docker


■Dockerのメリット

・公式のコンテナイメージが利用できる


■Dockerでできないこと

・基本的にはOSのGUIが使えない(X Windows Systemを使えばできる)
・スマフォアプリの開発
（Dockerの中で動くのはLinux系OSのみ）
・組み込みシステムの開発
（x86系CPU用のイメージはARM系CPUでは動作しない）
・直接SourceTreeが使えない(ボリュームを使えばできる)


■Dockerを使うデメリット
・ネイティブの場合と比較して動作が遅くなる
　（しかし、仮想マシンの場合と比較してそんなに遅くならない）
　https://qiita.com/ksato9700/items/a8ef8b6395058628fa09
・コンテナイメージを作成する場合には知識が必要になる
　（使うだけの場合には、あまり知識はいらない）


■Dockerを使ってみよう

docker run --name some-nginx -d -p 8080:80 nginx

公式イメージを使う
nginxのサービスを立ち上げる


■コンテナにログインする


■Dockerfileを使って、イメージをカスタマイズする


■vue.jsのコンテナを立ち上げる

■Volumeを使って、ソースファイルを入れる


■docker-compose.ymlを書く


■laravelのコンテナを立ち上げる
複数のコンテナでボリュームを共有する


■3層アーキテクチャを完成させる
複数のコンテナでネットワークを共有する



■サーバレス

https://dev.classmethod.jp/articles/cmdevio2019-container/

https://qiita.com/takanorig/items/3a3a0b43b5be5b4a124f


■必要なもの
AWS CLI
ECS CLI



